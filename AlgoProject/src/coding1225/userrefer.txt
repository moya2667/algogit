#include <stdio.h>
#define PRT false

#define MAXUser (10000)
#define MAX_CLUB (10)
#define MAXPriority 987654321
#define SWAP(a,b) {int temp = (a); (a) = (b); (b) = temp;};
#define MIN(a,b) (a)<(b)?(a):(b);

struct User {
 int id = -1;
 int server[MAX_CLUB] = { 0 };
 int serverIdx = -1;
 int priority = MAXPriority;
 User* prev = nullptr;
 User* next = nullptr;
};
User user[MAXUser];

struct Server {
 int userCnt;
 User tail;
};
Server server[MAX_CLUB];

static int Length;
static int ServerNum;
static int ServerCapa;
int serverPos[MAX_CLUB];

void addUser(int uid, int sid);
void delUser(int uid, int sid);
bool addFeasibleUser(int uid, int sid);
void updateAfterDel(int sid);

void print() {
 for (int c = 0; c < ServerNum; ++c) {
  printf("club[%d,%d] :\n", c, server[c].userCnt);
  User* u = server[c].tail.next;
  while (u && u->next) u = u->next;
  while (u && u->prev) {
   printf(" %d", u->id);
   u = u->prev;
  }
  printf("\n");
 }
 printf("---------------------------------\n");
}

int getDistance(int serverPos, int userPos) {
 return MIN((serverPos - userPos + Length) % Length, (userPos - serverPos + Length) % Length)
}

void Init(int L, int N, int C, int axis[MAX_CLUB]) {
 Length = L;
 ServerNum = N;
 ServerCapa = C;
 User emptyUser;
 for (int i = 0; i < ServerNum; i++) {
  serverPos[i] = axis[i];
  server[i].userCnt = 0;
  server[i].tail = emptyUser;
 }
 if (PRT) print();
}

int findJoinUser(int sid) {
 int findId = -1;
 int findPriority = 0;
 int lowestPriority = server[sid].tail.next->priority;

 for (int s = 0; s < ServerNum; s++) {
  if (s == sid) continue;

  User* curUser = server[s].tail.next;
  while (curUser) {
   if (curUser->priority >= lowestPriority)
    break;
   for (int i = 0; i < curUser->serverIdx; i++) {
    if (curUser->server[i] == sid) {
     if (curUser->priority > findPriority) {
      findPriority = curUser->priority;
      findId = curUser->id;
     }
     break;
    }
   }
   curUser = curUser->next;
  }
 }

 return findId;
}

int getServerIdx(int uid, int sid) {
 for (int i = 0; i < ServerNum; i++)
  if (user[uid].server[i] == sid)
   return i;
 return 0; // not reached
}

void unlink(User* node) {
 if (node->prev)
  node->prev->next = node->next;
 if (node->next)
  node->next->prev = node->prev;
}

void link(User* preNode, User* addNode) {
 addNode->next = preNode->next;
 addNode->prev = preNode;
 if (preNode->next)
  preNode->next->prev = addNode;
 preNode->next = addNode;
}

void addUser(int uid, int sid) {
 User* preUser = &server[sid].tail;
 while (preUser->next) {
  if (preUser->next->priority > user[uid].priority)
   break;
  preUser = preUser->next;
 }
 link(preUser, &user[uid]);
 user[uid].serverIdx = getServerIdx(uid, sid);
 server[sid].userCnt++;
}

bool addFeasibleUser(int uid, int sid) {
 if (server[sid].userCnt == ServerCapa && user[uid].priority < server[sid].tail.next->priority)
  return false;

 addUser(uid, sid);

 if (server[sid].userCnt == ServerCapa + 1) {
  int outUserId = server[sid].tail.next->id;
  delUser(outUserId, sid);
  updateAfterDel(sid);

  for (int i = user[outUserId].serverIdx + 1; i < ServerNum; i++) {
   if (addFeasibleUser(outUserId, user[outUserId].server[i]))
    break;
  }
 }
 return true;
}

void delUser(int uid, int sid) {
 unlink(&user[uid]);
 server[sid].userCnt--;
}

void updateAfterDel(int sid) {
 if (server[sid].userCnt != ServerCapa - 1)
  return;

 int comeId = findJoinUser(sid);
 if (comeId >= 0) {
  int comeServerId = user[comeId].server[user[comeId].serverIdx];
  delUser(comeId, comeServerId);
  addUser(comeId, sid);
  updateAfterDel(comeServerId);
 }
}

int RemovePlayer(int uid) {
 if (PRT) printf("[%s] pid(%d)\n", __FUNCTION__, uid);
 int curServer = user[uid].server[user[uid].serverIdx];
 delUser(uid, curServer);
 updateAfterDel(curServer);
 if (PRT) print();
 if (PRT) printf("removed pid(%d) club(%d)\n", uid, curServer);
 return curServer;
}

int AddPlayer(int uid, int axis, int power) {
 if (PRT) printf("[%s] pid(%d) location(%d) power(%d)\n", __FUNCTION__, uid, axis, power);
 int distance[MAX_CLUB];
 for (int i = 0; i < ServerNum; i++) {
  distance[i] = getDistance(serverPos[i], axis);
  user[uid].server[i] = i;
  for (int j = i; j > 0; j--) {
   if (distance[j] >= distance[j - 1]) {
    break;
   }
   SWAP(user[uid].server[j], user[uid].server[j - 1])
    SWAP(distance[j], distance[j - 1])
  }
 }
 user[uid].id = uid;
 user[uid].priority = power * 10001 + 10000 - uid;

 for (int i = 0; i < ServerNum; i++) {
  if (addFeasibleUser(uid, user[uid].server[i]))
   break;
 }

 if (PRT) print();
 return user[uid].server[user[uid].serverIdx];
}

int GetPlayerCount(int sid) {
 if (PRT) printf("[%s] cid(%d) %d\n", __FUNCTION__, sid, server[sid].userCnt);
 return server[sid].userCnt;
}
